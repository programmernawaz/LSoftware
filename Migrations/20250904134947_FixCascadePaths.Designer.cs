// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PathLabAPI.Data;

#nullable disable

namespace PathLabAPI.Migrations
{
    [DbContext(typeof(PathLabDbContext))]
    [Migration("20250904134947_FixCascadePaths")]
    partial class FixCascadePaths
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PathLabAPI.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("PathLabAPI.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TestOrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("TestOrderId")
                        .IsUnique();

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("PathLabAPI.Entities.LabTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("LabTests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Hematology",
                            Code = "CBC01",
                            Name = "CBC",
                            Price = 300m
                        },
                        new
                        {
                            Id = 2,
                            Category = "Biochemistry",
                            Code = "KFT01",
                            Name = "KFT",
                            Price = 500m
                        },
                        new
                        {
                            Id = 3,
                            Category = "Biochemistry",
                            Code = "LFT01",
                            Name = "LFT",
                            Price = 600m
                        },
                        new
                        {
                            Id = 4,
                            Category = "Biochemistry",
                            Code = "LIP01",
                            Name = "Lipid Profile",
                            Price = 700m
                        });
                });

            modelBuilder.Entity("PathLabAPI.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("PathLabAPI.Entities.TestOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("TestOrders");
                });

            modelBuilder.Entity("PathLabAPI.Entities.TestOrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LabTestId")
                        .HasColumnType("int");

                    b.Property<int>("TestOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LabTestId");

                    b.HasIndex("TestOrderId");

                    b.ToTable("TestOrderItems");
                });

            modelBuilder.Entity("PathLabAPI.Entities.TestParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LabTestId")
                        .HasColumnType("int");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceRange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LabTestId");

                    b.ToTable("TestParameters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LabTestId = 1,
                            ParameterName = "Hemoglobin",
                            ReferenceRange = "12-16",
                            Unit = "g/dL"
                        },
                        new
                        {
                            Id = 2,
                            LabTestId = 1,
                            ParameterName = "WBC Count",
                            ReferenceRange = "4000-11000",
                            Unit = "/mm³"
                        },
                        new
                        {
                            Id = 3,
                            LabTestId = 1,
                            ParameterName = "RBC Count",
                            ReferenceRange = "4.5-5.9",
                            Unit = "mill/µL"
                        },
                        new
                        {
                            Id = 4,
                            LabTestId = 1,
                            ParameterName = "Platelets",
                            ReferenceRange = "1.5-4.5",
                            Unit = "lakh/µL"
                        },
                        new
                        {
                            Id = 5,
                            LabTestId = 1,
                            ParameterName = "PCV (Hematocrit)",
                            ReferenceRange = "36-46",
                            Unit = "%"
                        },
                        new
                        {
                            Id = 6,
                            LabTestId = 2,
                            ParameterName = "Urea",
                            ReferenceRange = "15-40",
                            Unit = "mg/dL"
                        },
                        new
                        {
                            Id = 7,
                            LabTestId = 2,
                            ParameterName = "Creatinine",
                            ReferenceRange = "0.6-1.3",
                            Unit = "mg/dL"
                        },
                        new
                        {
                            Id = 8,
                            LabTestId = 2,
                            ParameterName = "Sodium (Na)",
                            ReferenceRange = "135-145",
                            Unit = "mEq/L"
                        },
                        new
                        {
                            Id = 9,
                            LabTestId = 2,
                            ParameterName = "Potassium (K)",
                            ReferenceRange = "3.5-5.0",
                            Unit = "mEq/L"
                        },
                        new
                        {
                            Id = 10,
                            LabTestId = 3,
                            ParameterName = "Total Bilirubin",
                            ReferenceRange = "0.3-1.2",
                            Unit = "mg/dL"
                        },
                        new
                        {
                            Id = 11,
                            LabTestId = 3,
                            ParameterName = "Direct Bilirubin",
                            ReferenceRange = "0.0-0.3",
                            Unit = "mg/dL"
                        },
                        new
                        {
                            Id = 12,
                            LabTestId = 3,
                            ParameterName = "SGOT (AST)",
                            ReferenceRange = "5-40",
                            Unit = "U/L"
                        },
                        new
                        {
                            Id = 13,
                            LabTestId = 3,
                            ParameterName = "SGPT (ALT)",
                            ReferenceRange = "5-35",
                            Unit = "U/L"
                        },
                        new
                        {
                            Id = 14,
                            LabTestId = 3,
                            ParameterName = "Alkaline Phosphatase",
                            ReferenceRange = "44-147",
                            Unit = "U/L"
                        },
                        new
                        {
                            Id = 15,
                            LabTestId = 3,
                            ParameterName = "Total Protein",
                            ReferenceRange = "6.0-8.3",
                            Unit = "g/dL"
                        },
                        new
                        {
                            Id = 16,
                            LabTestId = 3,
                            ParameterName = "Albumin",
                            ReferenceRange = "3.5-5.0",
                            Unit = "g/dL"
                        },
                        new
                        {
                            Id = 17,
                            LabTestId = 4,
                            ParameterName = "Total Cholesterol",
                            ReferenceRange = "<200",
                            Unit = "mg/dL"
                        },
                        new
                        {
                            Id = 18,
                            LabTestId = 4,
                            ParameterName = "Triglycerides",
                            ReferenceRange = "<150",
                            Unit = "mg/dL"
                        },
                        new
                        {
                            Id = 19,
                            LabTestId = 4,
                            ParameterName = "HDL Cholesterol",
                            ReferenceRange = ">40",
                            Unit = "mg/dL"
                        },
                        new
                        {
                            Id = 20,
                            LabTestId = 4,
                            ParameterName = "LDL Cholesterol",
                            ReferenceRange = "<100",
                            Unit = "mg/dL"
                        },
                        new
                        {
                            Id = 21,
                            LabTestId = 4,
                            ParameterName = "VLDL",
                            ReferenceRange = "5-40",
                            Unit = "mg/dL"
                        });
                });

            modelBuilder.Entity("PathLabAPI.Entities.TestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Flag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestOrderItemId")
                        .HasColumnType("int");

                    b.Property<int>("TestParameterId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TestOrderItemId");

                    b.HasIndex("TestParameterId");

                    b.ToTable("TestResults");
                });

            modelBuilder.Entity("PathLabAPI.Entities.Invoice", b =>
                {
                    b.HasOne("PathLabAPI.Entities.TestOrder", "TestOrder")
                        .WithOne("Invoice")
                        .HasForeignKey("PathLabAPI.Entities.Invoice", "TestOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestOrder");
                });

            modelBuilder.Entity("PathLabAPI.Entities.TestOrder", b =>
                {
                    b.HasOne("PathLabAPI.Entities.Doctor", "Doctor")
                        .WithMany("Orders")
                        .HasForeignKey("DoctorId");

                    b.HasOne("PathLabAPI.Entities.Patient", "Patient")
                        .WithMany("Orders")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("PathLabAPI.Entities.TestOrderItem", b =>
                {
                    b.HasOne("PathLabAPI.Entities.LabTest", "LabTest")
                        .WithMany()
                        .HasForeignKey("LabTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PathLabAPI.Entities.TestOrder", "TestOrder")
                        .WithMany("Items")
                        .HasForeignKey("TestOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LabTest");

                    b.Navigation("TestOrder");
                });

            modelBuilder.Entity("PathLabAPI.Entities.TestParameter", b =>
                {
                    b.HasOne("PathLabAPI.Entities.LabTest", "LabTest")
                        .WithMany("Parameters")
                        .HasForeignKey("LabTestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LabTest");
                });

            modelBuilder.Entity("PathLabAPI.Entities.TestResult", b =>
                {
                    b.HasOne("PathLabAPI.Entities.TestOrderItem", "TestOrderItem")
                        .WithMany("Results")
                        .HasForeignKey("TestOrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PathLabAPI.Entities.TestParameter", "TestParameter")
                        .WithMany()
                        .HasForeignKey("TestParameterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TestOrderItem");

                    b.Navigation("TestParameter");
                });

            modelBuilder.Entity("PathLabAPI.Entities.Doctor", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("PathLabAPI.Entities.LabTest", b =>
                {
                    b.Navigation("Parameters");
                });

            modelBuilder.Entity("PathLabAPI.Entities.Patient", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("PathLabAPI.Entities.TestOrder", b =>
                {
                    b.Navigation("Invoice");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("PathLabAPI.Entities.TestOrderItem", b =>
                {
                    b.Navigation("Results");
                });
#pragma warning restore 612, 618
        }
    }
}
